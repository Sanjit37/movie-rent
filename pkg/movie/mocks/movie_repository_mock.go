// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/movie/repository/movie_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "movie-rent/pkg/movie/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// FetchMoviesBySearchText mocks base method.
func (m *MockMovieRepository) FetchMoviesBySearchText(searchType, searchText string) ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMoviesBySearchText", searchType, searchText)
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMoviesBySearchText indicates an expected call of FetchMoviesBySearchText.
func (mr *MockMovieRepositoryMockRecorder) FetchMoviesBySearchText(searchType, searchText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMoviesBySearchText", reflect.TypeOf((*MockMovieRepository)(nil).FetchMoviesBySearchText), searchType, searchText)
}

// FetchMoviesByYear mocks base method.
func (m *MockMovieRepository) FetchMoviesByYear(year int) ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMoviesByYear", year)
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMoviesByYear indicates an expected call of FetchMoviesByYear.
func (mr *MockMovieRepositoryMockRecorder) FetchMoviesByYear(year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMoviesByYear", reflect.TypeOf((*MockMovieRepository)(nil).FetchMoviesByYear), year)
}

// GetMovieBy mocks base method.
func (m *MockMovieRepository) GetMovieBy(movieId int) (model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieBy", movieId)
	ret0, _ := ret[0].(model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieBy indicates an expected call of GetMovieBy.
func (mr *MockMovieRepositoryMockRecorder) GetMovieBy(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieBy", reflect.TypeOf((*MockMovieRepository)(nil).GetMovieBy), movieId)
}

// GetMovies mocks base method.
func (m *MockMovieRepository) GetMovies() ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies")
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMovieRepositoryMockRecorder) GetMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMovieRepository)(nil).GetMovies))
}

// Save mocks base method.
func (m *MockMovieRepository) Save(movie model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMovieRepositoryMockRecorder) Save(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMovieRepository)(nil).Save), movie)
}

// SaveAll mocks base method.
func (m *MockMovieRepository) SaveAll(movies []model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", movies)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockMovieRepositoryMockRecorder) SaveAll(movies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockMovieRepository)(nil).SaveAll), movies)
}
