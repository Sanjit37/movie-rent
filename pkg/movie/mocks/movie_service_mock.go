// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/movie/service/movie_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "movie-rent/pkg/movie/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieService is a mock of MovieService interface.
type MockMovieService struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceMockRecorder
}

// MockMovieServiceMockRecorder is the mock recorder for MockMovieService.
type MockMovieServiceMockRecorder struct {
	mock *MockMovieService
}

// NewMockMovieService creates a new mock instance.
func NewMockMovieService(ctrl *gomock.Controller) *MockMovieService {
	mock := &MockMovieService{ctrl: ctrl}
	mock.recorder = &MockMovieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService) EXPECT() *MockMovieServiceMockRecorder {
	return m.recorder
}

// AddMovie mocks base method.
func (m *MockMovieService) AddMovie() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovie")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockMovieServiceMockRecorder) AddMovie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockMovieService)(nil).AddMovie))
}

// GetFilteredMovies mocks base method.
func (m *MockMovieService) GetFilteredMovies(searchType, searchText string) ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredMovies", searchType, searchText)
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredMovies indicates an expected call of GetFilteredMovies.
func (mr *MockMovieServiceMockRecorder) GetFilteredMovies(searchType, searchText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredMovies", reflect.TypeOf((*MockMovieService)(nil).GetFilteredMovies), searchType, searchText)
}

// GetMovieBy mocks base method.
func (m *MockMovieService) GetMovieBy(movieId int) (model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieBy", movieId)
	ret0, _ := ret[0].(model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieBy indicates an expected call of GetMovieBy.
func (mr *MockMovieServiceMockRecorder) GetMovieBy(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieBy", reflect.TypeOf((*MockMovieService)(nil).GetMovieBy), movieId)
}

// GetMovies mocks base method.
func (m *MockMovieService) GetMovies() ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies")
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMovieServiceMockRecorder) GetMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMovieService)(nil).GetMovies))
}
