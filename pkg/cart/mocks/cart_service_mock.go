// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cart/service/cart_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "movie-rent/pkg/cart/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartService is a mock of CartService interface.
type MockCartService struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceMockRecorder
}

// MockCartServiceMockRecorder is the mock recorder for MockCartService.
type MockCartServiceMockRecorder struct {
	mock *MockCartService
}

// NewMockCartService creates a new mock instance.
func NewMockCartService(ctrl *gomock.Controller) *MockCartService {
	mock := &MockCartService{ctrl: ctrl}
	mock.recorder = &MockCartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartService) EXPECT() *MockCartServiceMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartService) AddToCart(request model.CartRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartServiceMockRecorder) AddToCart(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartService)(nil).AddToCart), request)
}

// GetCartItems mocks base method.
func (m *MockCartService) GetCartItems(userId int) ([]model.CartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", userId)
	ret0, _ := ret[0].([]model.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockCartServiceMockRecorder) GetCartItems(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockCartService)(nil).GetCartItems), userId)
}
