// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cart/repository/cart_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "movie-rent/pkg/cart/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartRepository) AddToCart(cart model.CartRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", cart)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartRepositoryMockRecorder) AddToCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartRepository)(nil).AddToCart), cart)
}

// GetCartItems mocks base method.
func (m *MockCartRepository) GetCartItems(userId int) ([]model.CartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", userId)
	ret0, _ := ret[0].([]model.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockCartRepositoryMockRecorder) GetCartItems(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockCartRepository)(nil).GetCartItems), userId)
}
